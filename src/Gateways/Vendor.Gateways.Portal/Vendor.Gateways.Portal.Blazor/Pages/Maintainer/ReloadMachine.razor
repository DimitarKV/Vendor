@page "/Maintainer/Reload/{id:int}"
@using Vendor.Gateways.Portal.Services.Maintainer
@using Vendor.Domain.Views
@using Vendor.Gateways.Portal.DTO
@using Vendor.Gateways.Portal.Models
@using Vendor.Gateways.Portal.Services.Product

@inject IMaintainerService MaintainerService;
@inject IProductService ProductService;
@inject NavigationManager NavManager;

@if (Initialized)
{
    <EditForm Model="@VendingView"
              OnValidSubmit="@HandleFormSubmitAsync" class="mx-1 mx-md-4"
              style="@(IsFormVisible ? "" : "display: none")">

        <div class="mt-5 container justify-content-center">
            <ul class="validation-errors">
                @foreach (var error in _validationErrors)
                {
                    <li class="validation-message">@error</li>
                }
            </ul>

            <table class="table text-center text-light" style="background: rgba(73, 80, 87, 0.5)">
                @for (int row = 0; row < Math.Ceiling(VendingView.Spirals.Count / (decimal)VendingView.SpiralsPerRow); row++)
                {
                    <tr>
                        @for (int col = 0; col < VendingView.SpiralsPerRow && (row * VendingView.SpiralsPerRow + col) < VendingView.Spirals.Count; col++)
                        {
                            var spiral = VendingView.Spirals[row * VendingView.SpiralsPerRow + col];
                            <td style="background: @(spiral.Loads == 0 ? "rgba(254,127,150,0.5);" : "rgba(58,161,135,0.5);")">
                                <div>
                                    #@spiral.Id
                                </div>
                                <div>

                                    <div>
                                        <InputSelect @bind-Value="@spiral.ProductId">
                                            @foreach (var product in Products)
                                            {
                                                <option value="@product.Key" selected="@(product.Key == @spiral.ProductId)">@product.Value.Name</option>
                                            }
                                            @if (spiral.ProductId == -1)
                                            {
                                                <option value="-1">No product</option>
                                            }
                                        </InputSelect>
                                    </div>
                                    <div>
                                        <InputNumber @bind-Value="@spiral.Loads" style="width: 40px;" step="1" min="0"/>
                                        at
                                        <InputNumber @bind-Value="spiral.Price" style="width: 55px;" step="0.1" min="0"/>лв.
                                    </div>
                                </div>
                            </td>
                        }
                    </tr>
                }
            </table>
            <button type="submit" class="btn btn-primary">Save</button>
        </div>

    </EditForm>

    <div class="mt-5 container justify-content-center text-light">
        <EditForm Model="@MoneyModel"
                  OnValidSubmit="@HandleMoneyExtractionAsync" class="mx-1 mx-md-4"
                  style="@(IsFormVisible ? "" : "display: none")">
            <div>Money, currently in - @(VendingView.Money)лв.</div>
            <InputNumber @bind-Value="MoneyModel.Amount" step="0.1"></InputNumber>
            <button type="submit" class="btn btn-primary">Extract</button>
        </EditForm>
    </div>
}
else
{
    <div class="container text-center mt-5" style="height: 200px">
        <div class="spinner-border text-primary"  role="status">
            <span class="sr-only">Loading machines, please wait!</span>
        </div>
    </div>
}

@code {

    [Parameter]
    public int Id { get; set; }

    public VendingView VendingView { get; set; }
    private bool IsFormVisible = true;
    private bool Initialized = false;

    private ExtractMoneyModel MoneyModel = new();

    public Dictionary<int, ProductView> Products { get; set; } = new();

    private List<string> _validationErrors = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        var machineResponse = await MaintainerService.FetchMachineById(Id);
        if (machineResponse.IsValid)
            VendingView = machineResponse.Result;

        var productsResponse = await ProductService.FetchAllProducts();
        if (productsResponse.IsValid)
        {
            foreach (var product in productsResponse.Result)
            {
                Products.Add(product.Id, product);
            }
        }


        Initialized = true;
        StateHasChanged();
    }

    private async Task HandleFormSubmitAsync()
    {
        _validationErrors.Clear();
        var spiralResponse = await MaintainerService.LoadSpiralsAsync(VendingView.Spirals);
        if (!spiralResponse.IsValid)
        {
            _validationErrors.AddRange(spiralResponse.Errors!);
            return;
        }

        NavManager.NavigateTo(NavManager.Uri, true);
    }

    private async Task HandleMoneyExtractionAsync()
    {
        Console.WriteLine();
        var moneyExtractionResponse = await MaintainerService.ExtractMoney(new ExtractMoneyDto() { Amount = MoneyModel.Amount, VendingId = Id });
        if (moneyExtractionResponse.IsValid)
            NavManager.NavigateTo(NavManager.Uri, true);
        Console.WriteLine();
    }

}