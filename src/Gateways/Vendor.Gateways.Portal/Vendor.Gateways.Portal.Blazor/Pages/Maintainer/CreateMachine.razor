@page "/Maintainer/Create"
@using Vendor.Gateways.Portal.Services.Maintainer
@using AutoMapper
@using Vendor.Domain.DTO.Requests
@using Vendor.Gateways.Portal.Models

@inject IMaintainerService MaintainerService;
@inject IMapper Mapper;

<section class="vh-70 mt-5">
    <div class="container h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col-lg-12 col-xl-11">
                <div class="card text-black" style="border-radius: 25px;">
                    <div class="card-body p-md-5">
                        <div class="row justify-content-center">
                            <div class="col-md-10 col-lg-6 col-xl-5 order-2 order-lg-1">

                                <p class="text-center h1 fw-bold mb-5 mx-1 mx-md-4 mt-4">Create machine</p>


                                <EditForm Context="CreateMachineContext" Model="@DataModel" OnValidSubmit="@HandleFormSubmitAsync" class="mx-1 mx-md-4" style="@(IsFormVisible ? "" : "display: none")">

                                    <ul class="validation-errors">
                                        @foreach (var error in _validationErrors)
                                        {
                                            <li class="validation-message">@error</li>
                                        }
                                    </ul>

                                    <DataAnnotationsValidator/>
                                    <ValidationSummary/>

                                    <div class="d-flex flex-row align-items-center mb-4">
                                        <i class="fas fa-user fa-lg me-3 fa-fw"></i>
                                        <div class="form-outline flex-fill mb-0">
                                            <InputText id="title" @bind-Value="DataModel.Title" class="form-control"></InputText>
                                            <label class="form-label" for="title">Title</label>
                                        </div>
                                    </div>
                                    @if (_checkBoxValue)
                                    {
                                        <InputNumber hidden="true" id="latitude" @bind-Value="DataModel.Latitude" class="form-control"></InputNumber>
                                        <InputNumber hidden="true" id="longitude" @bind-Value="DataModel.Longitude" class="form-control"></InputNumber>
                                    }
                                    else
                                    {
                                        <div class="d-flex flex-row align-items-center mb-4">
                                            <i class="fas fa-user fa-lg me-3 fa-fw"></i>
                                            <div class="form-outline flex-fill mb-0">
                                                <InputNumber id="latitude" @bind-Value="DataModel.Latitude" class="form-control"></InputNumber>
                                                <label class="form-label" for="latitude">Latitude</label>
                                            </div>
                                        </div>
                                        <div class="d-flex flex-row align-items-center mb-4">
                                            <i class="fas fa-user fa-lg me-3 fa-fw"></i>
                                            <div class="form-outline flex-fill mb-0">
                                                <InputNumber id="longitude" @bind-Value="DataModel.Longitude" class="form-control"></InputNumber>
                                                <label class="form-label" for="longitude">Longitude</label>
                                            </div>
                                        </div>
                                    }
                                    <div class="d-flex flex-row align-items-center mb-4">
                                        <i class="fas fa-user fa-lg me-3 fa-fw"></i>
                                        <div class="form-outline flex-fill mb-0">

                                            <InputCheckbox id="currentLocationCheckbox" Value="@_checkBoxValue" ValueChanged="HandleCheckbox" ValueExpression="() => _checkBoxValue"></InputCheckbox>
                                            <label class="form-label" for="currentLocationCheckbox">Use current location</label>

                                        </div>
                                    </div>


                                    <div class="d-flex flex-row align-items-center mb-4">
                                        <i class="fas fa-user fa-lg me-3 fa-fw"></i>
                                        <div class="form-outline flex-fill mb-0">
                                            <InputNumber id="spirals" @bind-Value="DataModel.Spirals" class="form-control"></InputNumber>
                                            <label class="form-label" for="spirals">Spirals</label>
                                        </div>
                                    </div>

                                    <div class="mb-3">
                                        <InputFile class="form-control" OnChange="@LoadFiles" id="formFile"/>
                                        <label for="formFile" class="form-label">Picture</label>
                                    </div>


                                    <div class="d-flex justify-content-center mx-4 mb-3 mb-lg-4">
                                        <button type="submit" class="btn btn-primary btn-lg">Create</button>
                                    </div>

                                </EditForm>
                                @if (IsSuccessful)
                                {
                                    <div class="text-center">
                                        <p class="h5">Successfully created a <a href="/Maintainer/MachineInfo/@MachineId">machine</a>!</p>
                                        <p class="h4">
                                            <a href="/">Home</a>
                                        </p>
                                    </div>
                                }
                                else if (!IsFormVisible)
                                {
                                    <div class="text-center">
                                        <p class="h3">Magic, please wait!</p>
                                        <div class="spinner-border text-primary mt-5" role="status">
                                            <span class="sr-only">Magic, please wait!</span>
                                        </div>
                                    </div>
                                }
                                


                            </div>
                            <div class="col-md-10 col-lg-6 col-xl-7 d-flex align-items-center order-1 order-lg-2">

                                <img src="https://vendlife.cn/wp-content/uploads/2020/06/Vendlife-HOT-food-vending-machine.jpg"
                                     class="img-fluid" alt="Sample image">

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>


@code {
    private CreateVendingModel DataModel = new();
    private bool _checkBoxValue = false;

    private List<string> _validationErrors = new List<string>();
    private bool IsFormVisible = true;
    private bool IsSuccessful = false;
    private int MachineId;

    private IJSObjectReference _module;
    private DotNetObjectReference<CreateMachine> _dotNetObjectReference;
    private GeoCoordinatesModel? _coordinatesModel = null;

    [Inject]
    private IJSRuntime JsRuntime { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _dotNetObjectReference = DotNetObjectReference.Create(this);
        if (firstRender)
        {
            _module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Pages/Maintainer/CreateMachine.razor.js");
        }
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        DataModel.Image = e.File;
    }

    private async Task HandleCheckbox(bool val)
    {
        _checkBoxValue = val;
        if (_checkBoxValue)
            await GetLocationAsync();
    }

    private async Task HandleFormSubmitAsync()
    {
        _validationErrors.Clear();
        
        IsFormVisible = false;
        StateHasChanged();

        if (_checkBoxValue)
        {
            if (_coordinatesModel is not null)
            {
                DataModel.Latitude = _coordinatesModel!.Latitude;
                DataModel.Longitude = _coordinatesModel!.Longitude;
            }
        }

        var createResponse = await MaintainerService.CreateMachineAsync(Mapper.Map<CreateVendingRequestDto>(DataModel));

        if (!createResponse.IsValid)
        {
            _validationErrors.AddRange(createResponse.Errors!);
            IsFormVisible = true;
            StateHasChanged();
            return;
        }

        var setImageResponse = await MaintainerService.SetMachineImageAsync(new SetMachineImageDto() { Image = DataModel.Image, MachineId = createResponse.Result.Id });

        if (!setImageResponse.IsValid)
        {
            _validationErrors.AddRange(setImageResponse.Errors!);
            IsFormVisible = true;
            StateHasChanged();
            return;
        }

        IsSuccessful = true;
        StateHasChanged();
    }

    public async Task GetLocationAsync()
    {
        await _module.InvokeVoidAsync("getCurrentPosition", _dotNetObjectReference);
    }

    [JSInvokable]
    public async Task OnLocationSuccessAsync(GeoCoordinatesModel coordinatesModel)
    {
        _coordinatesModel = coordinatesModel;
        await InvokeAsync(StateHasChanged);
    }

}