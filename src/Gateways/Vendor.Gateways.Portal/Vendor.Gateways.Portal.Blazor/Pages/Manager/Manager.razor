@page "/manager/panel/{page:int?}/{perPage:int?}"
@using Vendor.Gateways.Portal.Services.User
@using Vendor.Domain.DTO.Requests
@using Vendor.Domain.Views

@inject IUserService UserService;
@inject NavigationManager NavManager;

<div class="row justify-content-center mt-5">
    <div class="col-sm-10 col-md-8 col-lg-6">


        <EditForm Model="Users" OnSubmit="HandleFormSubmitAsync">

            <table class="table table-dark">
                <thead>
                <tr>
                    <th scope="col">Username</th>
                    <th scope="col">Email</th>
                    <th scope="col">Role</th>
                    <th scope="col"></th>
                </tr>
                </thead>
                <tbody>
                @foreach (var user in Users)
                {
                    <tr>
                        <td>@user.Username</td>
                        <td>@user.Email</td>
                        <td>
                            <InputSelect @bind-Value="@user.Role" class="form-select" aria-label="Default select example">
                                @foreach (var role in Roles)
                                {
                                    if (user.Role == role)
                                    {
                                        <option value="@role" selected>@role</option>
                                    }
                                    else
                                    {
                                        <option value="@role">@role</option>
                                    }
                                }
                            </InputSelect>
                        </td>
                        <td>

                        </td>

                    </tr>
                }
                </tbody>

            </table>
            <button type="submit" class="btn btn-primary">Save</button>
        </EditForm>
    </div>
</div>


@code {

    [Parameter]
    public int Page { get; set; }

    [Parameter]
    public int PerPage { get; set; }

    public List<UserView> Users { get; set; } = new();
    public List<string> Roles { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (PerPage <= 0)
        {
            PerPage = 15;
        }
        if (Page < 0)
        {
            Page = 0;
        }
        var queryUsersTask = UserService.QueryUsersAsync(new QueryUsersRequestDto() { Page = Page, PerPage = PerPage });
        var queryRolesTask = UserService.QueryAvailableRolesAsync();
    //Render animation
        StateHasChanged();
        var usersApiResponse = await queryUsersTask;
        var rolesApiResponse = await queryRolesTask;
    //Stop animation
        StateHasChanged();
        Users = usersApiResponse.Result;
        Roles = rolesApiResponse.Result;
        StateHasChanged();
    }

    private async void HandleFormSubmitAsync()
    {
        foreach (var user in Users)
        {
            var updateResponse = await UserService.UpdateUserRole(user);
        }

        NavManager.NavigateTo(NavManager.Uri, true);
    }

}