@page "/Maintainer"
@using Vendor.Domain.Views
@using Vendor.Gateways.Portal.Providers
@using Vendor.Gateways.Portal.Services.Maintainer

@inject IMaintainerService _service
@inject TokenAuthenticationStateProvider _stateProvider

<h3>Maintainer</h3>
@if (_vendingViews.Count == 0)
{
    //TODO: Render loading animation
    <button @onclick="@PopulateVendingViews">Load</button>
}
else
{
    @foreach (var view in _vendingViews)
    {
        <h3>@view.Title</h3>
        <h3 @onclick="() => HandleMachine(view)">Handle</h3>
    }
}


@code {
    private List<VendingView> _vendingViews = new List<VendingView>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
    }

    private async Task PopulateVendingViews()
    {
        Console.WriteLine(await _stateProvider.GetTokenAsync());
        var response = await _service.FetchEmptyMachines();
        if (response.IsSuccessful)
            _vendingViews = response.Result!.Result;
        StateHasChanged();
    }

    private async Task HandleMachine(VendingView vending)
    {
        await _service.HandleMachine(vending.Title);
    }

}