@page "/product/register"
@using Microsoft.AspNetCore.Components
@using Vendor.Gateways.Portal.Models
@using AutoMapper
@using Vendor.Gateways.Portal.DTO
@using Vendor.Gateways.Portal.Services.Product

@inject IMapper Mapper;
@inject IProductService ProductService;
@inject NavigationManager NavManager;

<section class="vh-70 mt-5">
    <div class="container h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col-lg-12 col-xl-11">
                <div class="card text-black" style="border-radius: 25px;">
                    <div class="card-body p-md-5">
                        <div class="row justify-content-center">
                            <div class="col-md-10 col-lg-6 col-xl-5 order-2 order-lg-1">

                                <p class="text-center h1 fw-bold mb-5 mx-1 mx-md-4 mt-4">Create machine</p>


                                <EditForm Context="CreateProductContext" Model="@DataModel" OnValidSubmit="@HandleFormSubmitAsync" class="mx-1 mx-md-4" style="@(IsFormVisible ? "" : "display: none")">

                                    <ul class="validation-errors">
                                        @foreach (var error in _validationErrors)
                                        {
                                            <li class="validation-message">@error</li>
                                        }
                                    </ul>

                                    <DataAnnotationsValidator/>
                                    <ValidationSummary/>

                                    <div class="d-flex flex-row align-items-center mb-4">
                                        <i class="fas fa-user fa-lg me-3 fa-fw"></i>
                                        <div class="form-outline flex-fill mb-0">
                                            <InputText id="title" @bind-Value="DataModel.Name" class="form-control"></InputText>
                                            <label class="form-label" for="title">Name</label>
                                        </div>
                                    </div>

                                    <div class="mb-3">
                                        <InputFile class="form-control" OnChange="@LoadFiles" id="formFile"/>
                                        <label for="formFile" class="form-label">Image of the product</label>
                                    </div>


                                    <div class="d-flex justify-content-center mx-4 mb-3 mb-lg-4">
                                        <button type="submit" class="btn btn-primary btn-lg">Create</button>
                                    </div>

                                </EditForm>

                                @if (!IsFormVisible)
                                {
                                    <div class="text-center">
                                        <p class="h3">Magic, please wait!</p>
                                        <div class="spinner-border text-primary mt-5" role="status">
                                            <span class="sr-only">Magic, please wait!</span>
                                        </div>
                                    </div>
                                }



                            </div>
                            <div class="col-md-10 col-lg-6 col-xl-7 d-flex align-items-center order-1 order-lg-2">

                                <img src="https://images.squarespace-cdn.com/content/v1/5f89f8f7e9fad12804f4bd78/1617331779989-L4U024JOPD2KGDKX0M5L/snacks-in-america.jpg?format=1000w"
                                     class="img-fluid" alt="Sample image">

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    private RegisterProductModel DataModel = new();
    private List<string> _validationErrors = new List<string>();
    public bool IsFormVisible = true;

    private async Task HandleFormSubmitAsync()
    {
        IsFormVisible = false;
        StateHasChanged();

        var dto = Mapper.Map<RegisterProductDto>(DataModel);
        var productViewResponse = await ProductService.RegisterProductAsync(dto);

        if (productViewResponse.IsValid)
        {
            IsFormVisible = true;
            StateHasChanged();
            NavManager.NavigateTo(NavManager.Uri, true);
            return;
        }

        IsFormVisible = true;
        _validationErrors.AddRange(productViewResponse.Errors!);
        StateHasChanged();
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        DataModel.Image = e.File;
    }

}