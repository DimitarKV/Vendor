@page "/Test"
@using Vendor.Gateways.Portal.DTO
@implements IAsyncDisposable
<button @onclick=@GetLocationAsync>Get Location</button>

@if (_geoCoordinatesDto is not null)
{
    <div>
        Latitude : @_geoCoordinatesDto.Latitude <br />
        Longitude : @_geoCoordinatesDto.Longitude<br />
        Accuracy : @_geoCoordinatesDto.Accuracy
    </div>
}

@code {
    private readonly Lazy<Task<IJSObjectReference>> _moduleTask = default!;
    private readonly DotNetObjectReference<Test> _dotNetObjectReference;
    private GeoCoordinatesDto? _geoCoordinatesDto = null;

    [Inject]
    private IJSRuntime jsRuntime { get; set; } = default!;

    public Test()
    {
        _moduleTask = new(() => jsRuntime!.InvokeAsync<IJSObjectReference>(
            identifier: "import",
            args: "/js/GeoLocation.js")
            .AsTask());

        _dotNetObjectReference = DotNetObjectReference.Create(this);
    }

    public async Task GetLocationAsync()
    {
        var module = await _moduleTask.Value;
        await module.InvokeVoidAsync(identifier: "getCurrentPosition", _dotNetObjectReference);
    }

    [JSInvokable]
    public async Task OnSuccessAsync(GeoCoordinatesDto geoCoordinatesDto)
    {
        this._geoCoordinatesDto = geoCoordinatesDto;
        await InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        if (_moduleTask.IsValueCreated)
        {
            var module = await _moduleTask.Value;
            await module.DisposeAsync();
        }
    }
}