@using Vendor.Domain.Views
@using Vendor.Gateways.Portal.Services.Product
@inject IProductService ProductService

<div class="card text-center pt-3 rounded border-primary bg-transparent" style="width: 13rem;">
    <img class="card-img-top" src="@Machine.ImageUrl" style="width: 100%; height: 100%; object-fit: cover; object-position: 50% 50%" alt="Card image cap">
    <div class="card-body">
        <h5 class="card-title">@Machine.Title</h5>
        <p class="card-text">@Machine.Spirals.Count(s => s.Loads == 0) Empty spirals</p>

        @if (UnavailableProducts.Any())
        {
            <p class="card-text">Out of products @String.Join(", ", UnavailableProducts)</p>
        }

        <a href="/Maintainer/MachineInfo/@Machine.Id" class="btn btn-primary">More</a>
        @* <a @onclick="() => HandleMachine(view)" class="btn btn-success">Handle</a> *@
    </div>
</div>

@code {

    [Parameter]
    public VendingView Machine { get; set; }

    public List<string> UnavailableProducts { get; set; } = new() { "Kola", "Voda", "Chips", "nz" };

    protected override async Task OnParametersSetAsync()
    {
        await AggregateEmptySpirals();
        StateHasChanged();
    }

    protected async Task AggregateEmptySpirals()
    {
        var unavailableProductIds = Machine.Spirals.Aggregate(new Dictionary<int, int>(), (d, next) =>
        {
            if (d.ContainsKey(next.ProductId))
                d[next.ProductId] += next.Loads;
            else
                d.Add(next.ProductId, next.Loads);
            return d;
        },
            d => d.Where(kp => kp.Value == 0).Select(kp => kp.Key).ToList());

        foreach (var productId in unavailableProductIds)
        {
            var result = await ProductService.GetProductByIdAsync(productId);
            if (result.IsSuccessful && result.Result!.IsValid)
                UnavailableProducts.Add(result.Result!.Result.Name);
        }
    }

}